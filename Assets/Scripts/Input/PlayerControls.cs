//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""c83b6aa5-c839-4cee-a8c7-6f33b631f936"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""7f30ca01-227a-4a3f-8398-bc6c66d50dd9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""642e2b45-cd78-49b9-9529-b96ad45bc52a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""acdfeaac-a1f1-4e34-a5f9-77589507899d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""0549bc95-25fb-4345-ab92-27a13521f389"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Flashlight"",
                    ""type"": ""Button"",
                    ""id"": ""0efc3468-db7d-415a-8103-149b3ae85bd3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""f0f5293a-3156-43a5-a705-7d9beb596643"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bf690704-71cf-4786-b2b6-396c0e5d903a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""78b390ad-6bd7-4c4f-8f13-11eb02c14089"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""094f1cf3-e8f8-4a47-ad9f-f0eb264563d7"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""823e54e0-9450-4e87-88f9-13b1c46180e8"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""cfb37d27-8b84-40fc-9853-739d299a347c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9984d860-99d5-4211-bc4f-da7fdc37dd04"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f222ed7c-038f-4602-952b-86d9e207abff"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3b0c3cd6-666a-410c-b55b-2ab041afa16f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b670d0c0-7578-48c7-9feb-84f5e9acdcdd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d67760c7-2182-48fb-8569-002eb5479590"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49d0f530-c5f6-4ecf-b2ec-1df03d9ac17a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d869964-3d7e-4ce6-aa3e-c99e7ad31887"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca2ce310-06f6-4a88-86f0-8294629bdd77"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7eccb899-f7ae-4582-800d-80381955a52f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf29abd5-0c36-423d-a4d8-48d897b43f65"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85bf7c39-7455-4f89-bb4d-208a4341396c"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa5d69b4-390f-483a-9fba-c37d462e2c88"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""acfdf7df-f49f-4bfb-b4e9-6bc697429761"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4238298-e9d4-4446-a369-b66034b38dbf"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48e03db2-3489-4115-9853-55080a7b5cc5"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flashlight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52c13f47-8726-414e-a282-fc5a42b0ace4"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flashlight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RotaryLock"",
            ""id"": ""9f790a2b-3f27-47e8-a183-19cc5f8db056"",
            ""actions"": [
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""16b20d8f-7260-4b5c-9922-7de01c19b6e9"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SpeedUp"",
                    ""type"": ""Button"",
                    ""id"": ""15c1a3d2-561d-4081-bd85-f598997e1e9e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""6c134ec1-acb7-4069-8475-e09bd1b20c7f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Left/Right_WASD"",
                    ""id"": ""e63886b2-d690-45cc-b53e-ec0283592def"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6ba25dad-2842-4d29-a34b-382bf3b60b36"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1587fdc3-f388-49bb-a3f6-a5ce62342615"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left/Right_ARRW"",
                    ""id"": ""90a237f3-d13a-4c97-b523-1e3b590acee3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3ec1402c-2522-4866-8f8d-b5e454f31a0c"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1a8cebbc-7c27-4056-937b-a18bf623080d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left/Right_DPAD"",
                    ""id"": ""b47b0960-e6f0-47e9-83a7-9b4e9766e854"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""95d3b9a7-f861-4a9b-80cf-0ba78149b95e"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b411694d-e1cf-43f5-ab9f-8452ded9a5fe"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""605a6970-fc07-4402-a615-5f250a163c08"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04b94b03-4419-47f0-aa2b-007ce6c56735"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpeedUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""962db2cb-6e54-4fe6-91d6-99307bdc329d"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CombinationLock"",
            ""id"": ""57f4d894-0ccf-4f81-827a-99196bfc8b2f"",
            ""actions"": [
                {
                    ""name"": ""Switch Dial Right"",
                    ""type"": ""Button"",
                    ""id"": ""cc91d546-b0b7-4d00-b623-7eff4419ab53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Change Number Up"",
                    ""type"": ""Button"",
                    ""id"": ""6688d274-78fb-400f-ba54-83ef2b1aa47b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""cde571c0-e731-452e-aabf-1fab9066f466"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Change Number Down"",
                    ""type"": ""Button"",
                    ""id"": ""d22d6220-455d-4bbd-8a31-454dfd2bdd49"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch Dial Leflt"",
                    ""type"": ""Button"",
                    ""id"": ""1279e743-a74b-49e9-b270-ee3e41251190"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CheckAnswer"",
                    ""type"": ""Button"",
                    ""id"": ""01af20d0-fbb5-42e3-84a3-2da78188a6dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""746b4153-389f-420d-b6f1-3c197433da32"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch Dial Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6ec86e5-6136-4ae9-96d6-c6f4f9df4e22"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch Dial Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f90a718c-8490-46b1-b567-88d68ec41bc1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Number Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7951a4b-0a10-4f21-a5d7-4964e334bf83"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Number Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""736bd9ba-a544-45ba-a396-499739b13fa9"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bef3064a-150a-4fd1-bc22-107d4471282f"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Number Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1f1855b-56e9-444d-989a-ab0fee4caca6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Number Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2415c6b4-0a46-4c7e-a37b-805086d86469"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch Dial Leflt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e4af6af-20bb-4d26-9e0c-2e966db6b6b6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch Dial Leflt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25b30722-667e-450b-9eb4-0879d3fb9297"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CheckAnswer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        m_Player_Pause = m_Player.FindAction("Pause", throwIfNotFound: true);
        m_Player_Sprint = m_Player.FindAction("Sprint", throwIfNotFound: true);
        m_Player_Flashlight = m_Player.FindAction("Flashlight", throwIfNotFound: true);
        // RotaryLock
        m_RotaryLock = asset.FindActionMap("RotaryLock", throwIfNotFound: true);
        m_RotaryLock_Rotation = m_RotaryLock.FindAction("Rotation", throwIfNotFound: true);
        m_RotaryLock_SpeedUp = m_RotaryLock.FindAction("SpeedUp", throwIfNotFound: true);
        m_RotaryLock_Exit = m_RotaryLock.FindAction("Exit", throwIfNotFound: true);
        // CombinationLock
        m_CombinationLock = asset.FindActionMap("CombinationLock", throwIfNotFound: true);
        m_CombinationLock_SwitchDialRight = m_CombinationLock.FindAction("Switch Dial Right", throwIfNotFound: true);
        m_CombinationLock_ChangeNumberUp = m_CombinationLock.FindAction("Change Number Up", throwIfNotFound: true);
        m_CombinationLock_Exit = m_CombinationLock.FindAction("Exit", throwIfNotFound: true);
        m_CombinationLock_ChangeNumberDown = m_CombinationLock.FindAction("Change Number Down", throwIfNotFound: true);
        m_CombinationLock_SwitchDialLeflt = m_CombinationLock.FindAction("Switch Dial Leflt", throwIfNotFound: true);
        m_CombinationLock_CheckAnswer = m_CombinationLock.FindAction("CheckAnswer", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Interact;
    private readonly InputAction m_Player_Pause;
    private readonly InputAction m_Player_Sprint;
    private readonly InputAction m_Player_Flashlight;
    public struct PlayerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputAction @Pause => m_Wrapper.m_Player_Pause;
        public InputAction @Sprint => m_Wrapper.m_Player_Sprint;
        public InputAction @Flashlight => m_Wrapper.m_Player_Flashlight;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @Flashlight.started += instance.OnFlashlight;
            @Flashlight.performed += instance.OnFlashlight;
            @Flashlight.canceled += instance.OnFlashlight;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @Flashlight.started -= instance.OnFlashlight;
            @Flashlight.performed -= instance.OnFlashlight;
            @Flashlight.canceled -= instance.OnFlashlight;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // RotaryLock
    private readonly InputActionMap m_RotaryLock;
    private List<IRotaryLockActions> m_RotaryLockActionsCallbackInterfaces = new List<IRotaryLockActions>();
    private readonly InputAction m_RotaryLock_Rotation;
    private readonly InputAction m_RotaryLock_SpeedUp;
    private readonly InputAction m_RotaryLock_Exit;
    public struct RotaryLockActions
    {
        private @PlayerControls m_Wrapper;
        public RotaryLockActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotation => m_Wrapper.m_RotaryLock_Rotation;
        public InputAction @SpeedUp => m_Wrapper.m_RotaryLock_SpeedUp;
        public InputAction @Exit => m_Wrapper.m_RotaryLock_Exit;
        public InputActionMap Get() { return m_Wrapper.m_RotaryLock; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RotaryLockActions set) { return set.Get(); }
        public void AddCallbacks(IRotaryLockActions instance)
        {
            if (instance == null || m_Wrapper.m_RotaryLockActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RotaryLockActionsCallbackInterfaces.Add(instance);
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @SpeedUp.started += instance.OnSpeedUp;
            @SpeedUp.performed += instance.OnSpeedUp;
            @SpeedUp.canceled += instance.OnSpeedUp;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
        }

        private void UnregisterCallbacks(IRotaryLockActions instance)
        {
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @SpeedUp.started -= instance.OnSpeedUp;
            @SpeedUp.performed -= instance.OnSpeedUp;
            @SpeedUp.canceled -= instance.OnSpeedUp;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
        }

        public void RemoveCallbacks(IRotaryLockActions instance)
        {
            if (m_Wrapper.m_RotaryLockActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRotaryLockActions instance)
        {
            foreach (var item in m_Wrapper.m_RotaryLockActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RotaryLockActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RotaryLockActions @RotaryLock => new RotaryLockActions(this);

    // CombinationLock
    private readonly InputActionMap m_CombinationLock;
    private List<ICombinationLockActions> m_CombinationLockActionsCallbackInterfaces = new List<ICombinationLockActions>();
    private readonly InputAction m_CombinationLock_SwitchDialRight;
    private readonly InputAction m_CombinationLock_ChangeNumberUp;
    private readonly InputAction m_CombinationLock_Exit;
    private readonly InputAction m_CombinationLock_ChangeNumberDown;
    private readonly InputAction m_CombinationLock_SwitchDialLeflt;
    private readonly InputAction m_CombinationLock_CheckAnswer;
    public struct CombinationLockActions
    {
        private @PlayerControls m_Wrapper;
        public CombinationLockActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchDialRight => m_Wrapper.m_CombinationLock_SwitchDialRight;
        public InputAction @ChangeNumberUp => m_Wrapper.m_CombinationLock_ChangeNumberUp;
        public InputAction @Exit => m_Wrapper.m_CombinationLock_Exit;
        public InputAction @ChangeNumberDown => m_Wrapper.m_CombinationLock_ChangeNumberDown;
        public InputAction @SwitchDialLeflt => m_Wrapper.m_CombinationLock_SwitchDialLeflt;
        public InputAction @CheckAnswer => m_Wrapper.m_CombinationLock_CheckAnswer;
        public InputActionMap Get() { return m_Wrapper.m_CombinationLock; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombinationLockActions set) { return set.Get(); }
        public void AddCallbacks(ICombinationLockActions instance)
        {
            if (instance == null || m_Wrapper.m_CombinationLockActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CombinationLockActionsCallbackInterfaces.Add(instance);
            @SwitchDialRight.started += instance.OnSwitchDialRight;
            @SwitchDialRight.performed += instance.OnSwitchDialRight;
            @SwitchDialRight.canceled += instance.OnSwitchDialRight;
            @ChangeNumberUp.started += instance.OnChangeNumberUp;
            @ChangeNumberUp.performed += instance.OnChangeNumberUp;
            @ChangeNumberUp.canceled += instance.OnChangeNumberUp;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
            @ChangeNumberDown.started += instance.OnChangeNumberDown;
            @ChangeNumberDown.performed += instance.OnChangeNumberDown;
            @ChangeNumberDown.canceled += instance.OnChangeNumberDown;
            @SwitchDialLeflt.started += instance.OnSwitchDialLeflt;
            @SwitchDialLeflt.performed += instance.OnSwitchDialLeflt;
            @SwitchDialLeflt.canceled += instance.OnSwitchDialLeflt;
            @CheckAnswer.started += instance.OnCheckAnswer;
            @CheckAnswer.performed += instance.OnCheckAnswer;
            @CheckAnswer.canceled += instance.OnCheckAnswer;
        }

        private void UnregisterCallbacks(ICombinationLockActions instance)
        {
            @SwitchDialRight.started -= instance.OnSwitchDialRight;
            @SwitchDialRight.performed -= instance.OnSwitchDialRight;
            @SwitchDialRight.canceled -= instance.OnSwitchDialRight;
            @ChangeNumberUp.started -= instance.OnChangeNumberUp;
            @ChangeNumberUp.performed -= instance.OnChangeNumberUp;
            @ChangeNumberUp.canceled -= instance.OnChangeNumberUp;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
            @ChangeNumberDown.started -= instance.OnChangeNumberDown;
            @ChangeNumberDown.performed -= instance.OnChangeNumberDown;
            @ChangeNumberDown.canceled -= instance.OnChangeNumberDown;
            @SwitchDialLeflt.started -= instance.OnSwitchDialLeflt;
            @SwitchDialLeflt.performed -= instance.OnSwitchDialLeflt;
            @SwitchDialLeflt.canceled -= instance.OnSwitchDialLeflt;
            @CheckAnswer.started -= instance.OnCheckAnswer;
            @CheckAnswer.performed -= instance.OnCheckAnswer;
            @CheckAnswer.canceled -= instance.OnCheckAnswer;
        }

        public void RemoveCallbacks(ICombinationLockActions instance)
        {
            if (m_Wrapper.m_CombinationLockActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICombinationLockActions instance)
        {
            foreach (var item in m_Wrapper.m_CombinationLockActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CombinationLockActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CombinationLockActions @CombinationLock => new CombinationLockActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnFlashlight(InputAction.CallbackContext context);
    }
    public interface IRotaryLockActions
    {
        void OnRotation(InputAction.CallbackContext context);
        void OnSpeedUp(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
    }
    public interface ICombinationLockActions
    {
        void OnSwitchDialRight(InputAction.CallbackContext context);
        void OnChangeNumberUp(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
        void OnChangeNumberDown(InputAction.CallbackContext context);
        void OnSwitchDialLeflt(InputAction.CallbackContext context);
        void OnCheckAnswer(InputAction.CallbackContext context);
    }
}
